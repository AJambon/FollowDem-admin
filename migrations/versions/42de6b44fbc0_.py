"""empty message

Revision ID: 42de6b44fbc0
Revises: ed8fadc08a5a
Create Date: 2020-01-27 16:12:36.051850

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '42de6b44fbc0'
down_revision = 'ed8fadc08a5a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('gps_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('gps_date', sa.DateTime(), nullable=True),
    sa.Column('ttf', sa.Integer(), nullable=True),
    sa.Column('x', sa.Float(), nullable=True),
    sa.Column('y', sa.Float(), nullable=True),
    sa.Column('temperature', sa.Integer(), nullable=True),
    sa.Column('sat_number', sa.Integer(), nullable=True),
    sa.Column('hadop', sa.Float(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('altitude', sa.Integer(), nullable=True),
    sa.Column('geom_mp', geoalchemy2.types.Geometry(geometry_type='POINT'), nullable=True),
    sa.Column('dimension', sa.String(length=50), nullable=True),
    sa.Column('accurate', sa.Boolean(), nullable=True),
    sa.Column('animale_device_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['animale_device_id'], ['followdem.animal_devices.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='followdem'
    )
    op.drop_index('idx_analyses_geom_mp', table_name='analyses')
    op.drop_table('analyses')
    op.drop_constraint('animal_attributes_attribute_id_fkey', 'animal_attributes', type_='foreignkey')
    op.drop_constraint('animal_attributes_animal_id_fkey', 'animal_attributes', type_='foreignkey')
    op.create_foreign_key(None, 'animal_attributes', 'attributes', ['attribute_id'], ['id'], source_schema='followdem', referent_schema='followdem')
    op.create_foreign_key(None, 'animal_attributes', 'animals', ['animal_id'], ['id'], source_schema='followdem', referent_schema='followdem', ondelete='CASCADE')
    op.drop_constraint('animal_devices_animal_id_fkey', 'animal_devices', type_='foreignkey')
    op.drop_constraint('animal_devices_device_id_fkey', 'animal_devices', type_='foreignkey')
    op.create_foreign_key(None, 'animal_devices', 'devices', ['device_id'], ['id'], source_schema='followdem', referent_schema='followdem')
    op.create_foreign_key(None, 'animal_devices', 'animals', ['animal_id'], ['id'], source_schema='followdem', referent_schema='followdem', ondelete='CASCADE')
    op.drop_constraint('devices_device_type_id_fkey', 'devices', type_='foreignkey')
    op.create_foreign_key(None, 'devices', 'device_types', ['device_type_id'], ['id'], source_schema='followdem', referent_schema='followdem')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'devices', schema='followdem', type_='foreignkey')
    op.create_foreign_key('devices_device_type_id_fkey', 'devices', 'device_types', ['device_type_id'], ['id'])
    op.drop_constraint(None, 'animal_devices', schema='followdem', type_='foreignkey')
    op.drop_constraint(None, 'animal_devices', schema='followdem', type_='foreignkey')
    op.create_foreign_key('animal_devices_device_id_fkey', 'animal_devices', 'devices', ['device_id'], ['id'])
    op.create_foreign_key('animal_devices_animal_id_fkey', 'animal_devices', 'animals', ['animal_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'animal_attributes', schema='followdem', type_='foreignkey')
    op.drop_constraint(None, 'animal_attributes', schema='followdem', type_='foreignkey')
    op.create_foreign_key('animal_attributes_animal_id_fkey', 'animal_attributes', 'animals', ['animal_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('animal_attributes_attribute_id_fkey', 'animal_attributes', 'attributes', ['attribute_id'], ['id'])
    op.create_table('analyses',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('device_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gps_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ttf', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('x', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('y', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sat_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hadop', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('latitude', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('altitude', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('geom_mp', geoalchemy2.types.Geometry(geometry_type='POINT'), autoincrement=False, nullable=True),
    sa.Column('dimension', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('accurate', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('animale_device_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='analyses_pkey')
    )
    op.create_index('idx_analyses_geom_mp', 'analyses', ['geom_mp'], unique=False)
    op.drop_table('gps_data', schema='followdem')
    # ### end Alembic commands ###
